PS D:\BootCamp-Devops\Devops-Labs> cd labs  
cd : No se encuentra la ruta de acceso 'D:\BootCamp-Devops\Devops-Labs\labs' porque no existe.
En línea: 1 Carácter: 1
+ cd labs
+ ~~~~~~~
    + CategoryInfo          : ObjectNotFound: (D:\BootCamp-Devops\Devops-Labs\labs:String) [Set-Location], ItemNotFoundException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetLocationCommand
 
PS D:\BootCamp-Devops\Devops-Labs> cd .\Bootcamp-Devops\
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops> cd .\labs\
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs> cd .\lab-05-gcp-compute-engine\
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine> cd .\infraestructure\
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/google...
- Finding hashicorp/aws versions matching "~> 5.10.0"...
- Installed hashicorp/google v4.82.0 (signed by HashiCorp)
- Installing hashicorp/aws v5.10.0...
- Installed hashicorp/aws v5.10.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> terraform plan 
╷
│ Error: Invalid function argument
│
│   on provider-main.tf line 11, in provider "google":
│   11:   credentials = file("service-account.json")
│     ├────────────────
│     │ while calling file(path)
│
│ Invalid value for "path" parameter: no file exists at "service-account.json"; this function works only with files that are distributed as part 
│ of the configuration source code, so if this file will be created by a resource in this configuration you must instead obtain this result from 
│ an attribute of that resource.
╵
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:       
  + create

Terraform will perform the following actions:

  # google_compute_firewall.flask-firewall will be created
  + resource "google_compute_firewall" "flask-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-flask-app-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + allow {
          + ports    = [
              + "5000",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.ssh-firewall will be created
  + resource "google_compute_firewall" "ssh-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-ssh-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "ssh",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.linux-server will be created
  + resource "google_compute_instance" "linux-server" {
      + can_ip_forward          = false
      + cpu_platform            = (known after apply)
      + current_status          = (known after apply)
      + deletion_protection     = false
      + guest_accelerator       = (known after apply)
      + id                      = (known after apply)
      + instance_id             = (known after apply)
      + label_fingerprint       = (known after apply)
      + machine_type            = "f1-micro"
      + metadata_fingerprint    = (known after apply)
      + metadata_startup_script = "sudo apt-get update; sudo apt-get install -yq build-essential python3-pip rsync; pip install flask"
      + min_cpu_platform        = (known after apply)
      + name                    = "gcp-compute-engine-dev-linux-server"
      + project                 = (known after apply)
      + self_link               = (known after apply)
      + tags                    = [
          + "dev",
          + "gcp-compute-engine-dev-linux-server",
          + "ssh",
        ]
      + tags_fingerprint        = (known after apply)
      + zone                    = "us-central1-c"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "debian-cloud/debian-11"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + ipv6_access_type   = (known after apply)
          + name               = (known after apply)
          + network            = (known after apply)
          + network_ip         = (known after apply)
          + stack_type         = (known after apply)
          + subnetwork         = (known after apply)
          + subnetwork_project = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }
    }

  # google_compute_network.vpc_network will be created
  + resource "google_compute_network" "vpc_network" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1460
      + name                                      = "gcp-compute-engine-dev-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + project                                   = (known after apply)
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_subnetwork.subnetwork will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "gcp-compute-engine-dev-subnet"
      + network                    = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = (known after apply)
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vm_linux_server_instance_ip = (known after apply)

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"  
now.
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:       
  + create

Terraform will perform the following actions:

  # google_compute_firewall.flask-firewall will be created
  + resource "google_compute_firewall" "flask-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-flask-app-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + allow {
          + ports    = [
              + "5000",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.ssh-firewall will be created
  + resource "google_compute_firewall" "ssh-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-ssh-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "ssh",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.linux-server will be created
  + resource "google_compute_instance" "linux-server" {
      + can_ip_forward          = false
      + cpu_platform            = (known after apply)
      + current_status          = (known after apply)
      + deletion_protection     = false
      + guest_accelerator       = (known after apply)
      + id                      = (known after apply)
      + instance_id             = (known after apply)
      + label_fingerprint       = (known after apply)
      + machine_type            = "f1-micro"
      + metadata_fingerprint    = (known after apply)
      + metadata_startup_script = "sudo apt-get update; sudo apt-get install -yq build-essential python3-pip rsync; pip install flask"
      + min_cpu_platform        = (known after apply)
      + name                    = "gcp-compute-engine-dev-linux-server"
      + project                 = (known after apply)
      + self_link               = (known after apply)
      + tags                    = [
          + "dev",
          + "gcp-compute-engine-dev-linux-server",
          + "ssh",
        ]
      + tags_fingerprint        = (known after apply)
      + zone                    = "us-central1-c"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "debian-cloud/debian-11"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + ipv6_access_type   = (known after apply)
          + name               = (known after apply)
          + network            = (known after apply)
          + network_ip         = (known after apply)
          + stack_type         = (known after apply)
          + subnetwork         = (known after apply)
          + subnetwork_project = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }
    }

  # google_compute_network.vpc_network will be created
  + resource "google_compute_network" "vpc_network" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1460
      + name                                      = "gcp-compute-engine-dev-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + project                                   = (known after apply)
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_subnetwork.subnetwork will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "gcp-compute-engine-dev-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = (known after apply)
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vm_linux_server_instance_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_network.vpc_network: Creating...
╷
│ Error: Error creating Network: googleapi: Error 403: Compute Engine API has not been used in project 834977863499 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/compute.googleapis.com/overview?project=834977863499 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.
│ Details:
│ [
│   {
│     "@type": "type.googleapis.com/google.rpc.Help",
│     "links": [
│       {
│         "description": "Google developers console API activation",
│         "url": "https://console.developers.google.com/apis/api/compute.googleapis.com/overview?project=834977863499"
│       }
│   },
│   {
│     "@type": "type.googleapis.com/google.rpc.ErrorInfo",
│     "domain": "googleapis.com",
│     "metadatas": {
│       "consumer": "projects/834977863499",
│       "service": "compute.googleapis.com"
│     },
│     "reason": "SERVICE_DISABLED"
│   }
│ ]
│ , accessNotConfigured
│
│   with google_compute_network.vpc_network,
│   on network-main.tf line 1, in resource "google_compute_network" "vpc_network":
│    1: resource "google_compute_network" "vpc_network" {
│
╵
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:       
  + create

Terraform will perform the following actions:

  # google_compute_firewall.flask-firewall will be created
  + resource "google_compute_firewall" "flask-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-flask-app-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + allow {
          + ports    = [
              + "5000",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_firewall.ssh-firewall will be created
  + resource "google_compute_firewall" "ssh-firewall" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "gcp-compute-engine-dev-ssh-firewall"
      + network            = (known after apply)
      + priority           = 1000
      + project            = (known after apply)
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "ssh",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
    }

  # google_compute_instance.linux-server will be created
  + resource "google_compute_instance" "linux-server" {
      + can_ip_forward          = false
      + cpu_platform            = (known after apply)
      + current_status          = (known after apply)
      + deletion_protection     = false
      + guest_accelerator       = (known after apply)
      + id                      = (known after apply)
      + instance_id             = (known after apply)
      + label_fingerprint       = (known after apply)
      + machine_type            = "f1-micro"
      + metadata_fingerprint    = (known after apply)
      + metadata_startup_script = "sudo apt-get update; sudo apt-get install -yq build-essential python3-pip rsync; pip install flask"
      + min_cpu_platform        = (known after apply)
      + name                    = "gcp-compute-engine-dev-linux-server"
      + project                 = (known after apply)
      + self_link               = (known after apply)
      + tags                    = [
          + "dev",
          + "gcp-compute-engine-dev-linux-server",
          + "ssh",
        ]
      + tags_fingerprint        = (known after apply)
      + zone                    = "us-central1-c"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "debian-cloud/debian-11"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + ipv6_access_type   = (known after apply)
          + name               = (known after apply)
          + network            = (known after apply)
          + network_ip         = (known after apply)
          + stack_type         = (known after apply)
          + subnetwork         = (known after apply)
          + subnetwork_project = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }
    }

  # google_compute_network.vpc_network will be created
  + resource "google_compute_network" "vpc_network" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1460
      + name                                      = "gcp-compute-engine-dev-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + project                                   = (known after apply)
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_subnetwork.subnetwork will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "gcp-compute-engine-dev-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = (known after apply)
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vm_linux_server_instance_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_network.vpc_network: Creating...
google_compute_network.vpc_network: Still creating... [10s elapsed]
google_compute_network.vpc_network: Still creating... [20s elapsed]
google_compute_network.vpc_network: Creation complete after 22s [id=projects/834977863499/global/networks/gcp-compute-engine-dev-vpc]
google_compute_subnetwork.subnetwork: Creating...
google_compute_firewall.ssh-firewall: Creating...
google_compute_firewall.flask-firewall: Creating...
google_compute_subnetwork.subnetwork: Still creating... [10s elapsed]
google_compute_firewall.ssh-firewall: Still creating... [10s elapsed]
google_compute_firewall.flask-firewall: Still creating... [10s elapsed]
google_compute_firewall.ssh-firewall: Creation complete after 12s [id=projects/834977863499/global/firewalls/gcp-compute-engine-dev-ssh-firewall]google_compute_firewall.flask-firewall: Creation complete after 12s [id=projects/834977863499/global/firewalls/gcp-compute-engine-dev-flask-app-firewall]
google_compute_subnetwork.subnetwork: Creation complete after 14s [id=projects/834977863499/regions/us-central1/subnetworks/gcp-compute-engine-dev-subnet]
google_compute_instance.linux-server: Creating...
google_compute_instance.linux-server: Still creating... [10s elapsed]
google_compute_instance.linux-server: Creation complete after 14s [id=projects/834977863499/zones/us-central1-c/instances/gcp-compute-engine-dev-linux-server]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

vm_linux_server_instance_ip = "http://34.172.229.66:5000"
PS D:\BootCamp-Devops\Devops-Labs\Bootcamp-Devops\labs\lab-05-gcp-compute-engine\infraestructure> 